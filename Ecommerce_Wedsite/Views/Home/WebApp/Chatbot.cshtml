
<!DOCTYPE html>
<!-- Coding By CodingNepal - www.com -->
<html lang="en" dir="ltr">
    <head>
        <meta charset="utf-8">
        <title>Chatbot in JavaScript | CodingNepal</title>
        <link rel="stylesheet" href="~/css/chatbot3.css" type="text/css" media="all">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <!-- Google Fonts Link For Icons -->
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0" /> 
    </head>
    <body>
    <button class="chatbot-toggler" style="margin-right: 30px;">
            <span class="material-symbols-rounded">mode_comment</span>
            <span class="material-symbols-outlined">close</span>
        </button>
        <div class="chatbot" style="z-index: 99998;">
            <header>
                <h2>Chatbot</h2>
                <span class="close-btn material-symbols-outlined">close</span>
            </header>
            <ul class="chatbox">
                <li class="chat incoming">
                    <span class="material-symbols-outlined">smart_toy</span>
                    <p>Hi there 👋<br>How can I help you today?</p>
                </li>
            </ul>
            <div class="chat-input">
                <textarea placeholder="Enter a message..." spellcheck="false" required></textarea>
                <span id="send-btn" class="material-symbols-rounded">send</span>
            </div>
        </div>
    </body>
</html>
<script>
    /*  - Đã chạy: 
            được html, css và js
            Hàm chat Histories (trong 1 lần dùng, nhớ hết nội dung trước).
        Vấn đề:
            Chưa lưu những câu trò chuyện của người dùng và chat bot vào db. Để mỗi lần chạy thì sẽ ghi nhớ lại lời thoại trước.
            Chưa có và cần add thêm knowledge base. Giải pháp: tạo một file KB riêng, 
        Nhờ a Tín:
            - Xem giúp code: add API Coze không run được vì sao? 
        
    */ 
    
    const chatbotToggler = document.querySelector(".chatbot-toggler");
    const closeBtn = document.querySelector(".close-btn");
    const chatbox = document.querySelector(".chatbox");
    const chatInput = document.querySelector(".chat-input textarea");
    const sendChatBtn = document.querySelector(".chat-input span");
    let userMessage = null; // Variable to store user's message
    var botmess = "";
    var usermess = "";
    let chatHistories = [];
    const API_KEY = "sk-proj-lRcXij8pLpB7ivZFiY8VT3BlbkFJEpuVEMyrYbfAZHgFsvXv"; // API key của chat gpt here
    const inputInitHeight = chatInput.scrollHeight;
    const createChatLi = (message, className) => {
        // Create a chat <li> element with passed message and className
        const chatLi = document.createElement("li");
        chatLi.classList.add("chat", `${className}`);
        let chatContent = className === "outgoing" ? `<p></p>` : `<span class="material-symbols-outlined">smart_toy</span><p></p>`;
        chatLi.innerHTML = chatContent;
        chatLi.querySelector("p").textContent = message;
        return chatLi; // return chat <li> element
    }

     const generateResponse = (chatElement) => {
         const messageElement = chatElement.querySelector("p");
         const API_URL = "https://api.coze.com/open_api/v2/chat";
         const Bot_Id = '7362008468863320072';
         const yourQuery = chatHistories;
         const API_KEY2 = 'pat_o7wRRXrEnbRh8VFQsRx0WYgaeEIiOxKxFcr0XUHqfVKiGMowADPX4KPKxbvUctJr';
         let fullMessage = '';
         const requestOptions = {
             method: "POST",
             headers: {
                 "Content-Type": "application/json",
                 "Authorization": `Bearer ${API_KEY2}`,
                 "Accept": "*/*",
                 "Host": "api.coze.com",
                 "Connection": "keep-alive"
             },
             body: JSON.stringify({
                conversation_id: "123",
                bot_id: "7362008468863320072",
                user: "29032201862555",
                query: userMessage, 
                stream: false
            })
         }
         console.log("error here");
         fetch(API_URL, requestOptions).then(res => res.json()).then(data => { // gửi API và nd chat người dùng + lịch sử chat trước đó.
            for (var i = 0; i < data.messages.length; i++){
                if(data.messages[i].type == "answer")
                {
                    messageElement.textContent =  data.messages[i].content; // k trả ra được. chay qua hết
                    chatHistories.push({ role: "assistant", content: messageElement.textContent }); // each answer memorise. Run 2nd
                    botmess = messageElement.textContent; // lấy nội dung của bot mess gần nhất
                }
            }
        }).catch(() => { // nếu bắt lỗi:
            messageElement.classList.add("error");
            messageElement.textContent = "Oops! Something went wrong. Please try again.";
        }).finally(() => chatbox.scrollTo(0, chatbox.scrollHeight));
        console.log("error here 2");
    }
    @*
    const generateResponse = (chatElement) => { // Function create answer chat of bot
        const API_URL = "https://api.openai.com/v1/completions"; // API bth cho bot GPT trl.
        //const API_URL = "https://api.coze.com/open_api/v2/chat";
        const API_KEY = "sk-proj-lRcXij8pLpB7ivZFiY8VT3BlbkFJEpuVEMyrYbfAZHgFsvXv"; // Tài khoản bị expired api key r: https://whatsthebigdata.com/how-to-get-openai-api-key/
        const API_KEY2 = 'pat_fj0BbOc2cX8WSUTGnIAtvDvYCYRj6BfTtpmiw9L2WO12era4P2eQFMg20hregrGH'; // API key Coze token chỉ khi tạo mới có.
        const Bot_Id = '7351683108242145288'; // trên đường dẫn của con bot Coze
        const yourQuery = 'your_query_here'; // nội dung gửi cho bot là chatHistories
        const messageElement = chatElement.querySelector("p");
        // Define the properties and message for the API request

        const requestOptions = {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${API_KEY}`,
            },  
            body: JSON.stringify({
                model: "gpt-3.5-turbo",
                messages: chatHistories, // feed it with histories. start with null
            })
        }

        // const requestOptions = {
        //     method: "POST",
        //     headers: {
        //         "Content-Type": "application/json",
        //         "Authorization": `Bearer ${API_KEY}`
        //     },
        //     body: JSON.stringify({
        //         model: "gpt-3.5-turbo",
        //         messages: [{ role: "user", content: userMessage }], // feed it with most recent question. No memory

        //     })
        // }

        // Send POST request to API, get response and set the reponse as paragraph text
        // Hàm chat của Bot:
        fetch(API_URL, requestOptions).then(res => res.json()).then(data => { // gửi API và nd chat người dùng + lịch sử chat trước đó.
            //messageElement.textContent = data.choices[0].message.content.trim(); // kết quả trả về từ GPT bằng API
            messageElement.textContent = data.choices[0].message.content.trim();
            chatHistories.push({ role: "assistant", content: messageElement.textContent }); // each answer memorise. Run 2nd
            botmess = messageElement.textContent; // lấy nội dung của bot mess gần nhất
        }).catch(() => { // nếu bắt lỗi:
            messageElement.classList.add("error");
            messageElement.textContent = "Oops! Something went wrong. Please try again.";
        }).finally(() => chatbox.scrollTo(0, chatbox.scrollHeight));
    }
    *@
    const handleChat = () => { // Hàm chat User:
        userMessage = chatInput.value.trim(); // Get user entered message and remove extra whitespace
        if (!userMessage) return;
        chatInput.value = "";
        chatInput.style.height = `${inputInitHeight}px`;
        chatbox.appendChild(createChatLi(userMessage, "outgoing"));
        chatbox.scrollTo(0, chatbox.scrollHeight);
        chatHistories.push({ role: "user", content: userMessage }); // each question memorise. Run 1st
        usermess = userMessage; // lấy nội dung của user mess gần nhất trước

        setTimeout(() => {
            const incomingChatLi = createChatLi("Thinking...", "incoming");
            chatbox.appendChild(incomingChatLi);
            chatbox.scrollTo(0, chatbox.scrollHeight);
            generateResponse(incomingChatLi); // chat của user vào trc
        }, 600);
    }

    console.log(chatHistories);

    chatInput.addEventListener("input", () => {
        // Adjust the height of the input textarea based on its content
        chatInput.style.height = `${inputInitHeight}px`;
        chatInput.style.height = `${chatInput.scrollHeight}px`;
    });
    chatInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
            e.preventDefault();
            handleChat();
        }
    });

    sendChatBtn.addEventListener("click", handleChat);
    closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
    chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
</script>

<!--Vị trị file js rất quan trọng-->
@* <script src="/js/chatbotjs.js" defer></script> 
    // function chatMemory() // Không cần onclick. Gọi hàm là chạy thôi chatMemory(). CN: Để lưu đoạn chat giữa ng dùng và bot
    // {
    //     console.log(botmess);
    //     console.log(userMessage);
    //     if (getCookie("webname") != "") { // cần gửi thêm id user vào.
    //         $.ajax({
    //             type: "GET",
    //             url: "/ChatMemory/ChatMemoryFunc?botmess=" + botmess + "&usermess=" + userMessage,
    //             cache: !1,
    //             "async": !0,
    //             dataType: 'json',
    //             // result là kết quả return từ controller sang. success là nhận kết quả controller. Đã dùng ajax thì k có form
    //             success: function (result) {
    //                 if (result == true) {
    //                     alert("ok");
    //                 }
    //                 else {
    //                     alert("No ok");
    //                 }
    //             },
    //             error: function (result) {
    //                 console.log("error");
    //             }
    //         });
    //     }
    // }
*@
